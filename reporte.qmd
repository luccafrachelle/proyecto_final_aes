---
title: "Entrega Final de curso"
format:
  html:
    embed-resources: true
author: "Martín Grau Pérez , Lucca Frachelle"
date: "`r Sys.Date()`"
execute:
  echo: false
  message: false
  warning: false
---

```{r setup, include=FALSE}
library(tidyverse)
library(remotes)
library(devtools)
library(here)
library(readxl)
setwd(here())
#library(StatsBombR)
library(patchwork)
library(ggcorrplot)
library(gridExtra)
library(tidymodels)
library(agua)
library(h2o)
library(knitr)
library(rpart.plot)
library(yardstick)
library(xgboost)
library(lightgbm)
library(baguette) 
library(bonsai)
library(gt)
library(vip)
library(doParallel)

Matches<-readRDS("data/partidos_mundial2022.rds")
Matches_2023<-readRDS("data/partidos_mundialfem2023.rds")
d<-readRDS("data/partidos_mundial_COMPLETO2022.rds") 
d_mundialfem<-readRDS("data/data_mundial2023.rds") %>% 
  mutate(possession_team.name=str_extract(possession_team.name, ".*?(?= Women's)"),
         team.name=str_extract(team.name, ".*?(?= Women's)"))
eventos_irrelevantes<-c(5,18,19,24,26,27,34,35,36,40,41)

source("data/funciones creadas.R")
baseM<-read_rds("data/baseM.rds")
trayM<-read_rds("data/trayM.rds")
baseF<-read_rds("data/baseF.rds")
trayF<-read_rds("data/trayF.rds")
lineas <- data.frame(
  x = c(0, 0, 0, 120, 60, 0, 0, 18, 102, 102, 102, 0, 0, 6, 114, 114, 114),
  xend = c(120, 120, 0, 120, 60, 18, 18, 18, 120, 120, 102, 6, 6, 6, 120, 120, 114),
  y = c(0, 80, 0, 0, 0, 18, 62, 18, 18, 62, 18, 30, 50, 30, 30, 50, 30),
  yend = c(0, 80, 80, 80, 80, 18, 62, 62, 18, 62, 62, 30, 50, 50, 30, 50, 50))

```

## Resumen de la base

### Eventos

El objetivo del presente trabajo es encontrar y modelar los determinantes de éxito de una posesión en el contexto de un partido de fútbol. Para ello, se cuenta con información relativa a los 64 partidos de los mundiales masculino y femenino disputados en Qatar en 2022 y Australia/Nueva Zelanda en 2023, respectivamente. Concretamente, se cuenta con datos de *eventing* de la consultora especializada *StastBomb* y se obtuvieron a través de su paquete en R ‘StatsBombR’. Dichos datos de *eventing* refieren al registro de cada una de las acciones que realizan los jugadores con la pelota en cada uno de los partidos. Dicha base está compuesta por los distintos eventos que se realizaron en el transcurso de cada encuentro y variables asociadas a cada tipo de evento según corresponda (184 variables y 459967 observaciones entre los 2 mundiales). Se considera un evento cada una de las acciones realizadas, ya sea por los jugadores (pases, tiros al arco, atajadas, regates, traslados de balón, etc) así como del resto de los actores de un partido de fútbol (sustituciones, tarjetas, inicio/final de partido, entre otras). Las posesiones están compuestas por varios de estos tipos de acciones. En este caso, la base cuenta con 33 tipos de eventos distintos. Algunos de estas accionesno refieren específicamente a situaciones de juego tales como incios y finales de partidos, sustituciones de jugadores, formaciones iniciales, tarjetas mostradas por el juez, cambios tácticos, sueltas neutrales de balón y pausas en el partido ya sea por lesión u otra situación excepcional. Estos eventos no serán tenidos en cuenta en el análisis ya que se considera que no aportan nada desde el punto de vista del juego y de las posesiones dentro del mismo.

En ese sentido se trabajará con las acciones de juego que involucren la pelota o la disputa de ésta. Mayoritariamente tenemos pases pero también se registran traslados con pelota controlada (*Carry*), recepción de balón (*Ball Receipt*), acciones defensivas de presión hacia un rival (*Pressure*), recuperaciones de pelota (*Ball Recovery*), duelos (*Duel*), despejes (*Clearance*), tiros al arco (*Shot*), regates (*Dribble*), atajadas (*Goal Keeper*), entre otros.

```{r,echo=FALSE,message=FALSE,warning=FALSE}

g2<-d %>%
 group_by(type.name, match_id) %>%
 summarise(n = n()) %>%
 ungroup() %>%
 group_by(type.name) %>%
 summarise(mediana = round(median(n))) %>%
  filter(type.name %in% c("Pass","Ball Receipt*","Carry","Shot","Pressure","Ball Recovery","Duel","Clearance","Block","Goal Keeper")) %>% 
 #top_n(15, wt = mediana) %>%  
 mutate(type.name = fct_reorder(type.name, mediana, .desc = TRUE)) %>%
 ggplot(aes(x = type.name, y = mediana)) + 
 geom_col() + 
 labs(x = "tipo evento", y = "mediana por partido")+theme_bw()+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

g2
```

En este contexto se buscará estudiar las distintas secuencias de los equipos en cuanto tienen la posesión a su favor (*possession*). En ese sentido, tomando en cuenta ambas copas del mundo se cuenta en total con un promedio de un poco más de 177 posesiones por partido para el mundial masculino mientras que un poco menos de 193 para el femenino.

```{r descr pos,echo=FALSE}
g3<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
    filter(period<5 & !type.id %in% eventos_irrelevantes)  %>%
    group_by(mundial,match_id, possession) %>%
    summarise() %>% 
    count(match_id) %>% ungroup() %>% ggplot()+geom_boxplot(aes(mundial,n,fill=mundial))+labs(y='Posesiones por partido',x='Mundial')+
  scale_fill_brewer(palette="Set1")

```

```{r descr pases,fig.cap="dispersión posesiones y pases por partido según mundial",echo=FALSE,warning=FALSE,message=FALSE}
g4<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
    filter(period<5 & !type.id %in% eventos_irrelevantes & type.id==30)  %>%
    group_by(mundial,match_id) %>%
    summarise(n=n()) %>%  ungroup() %>% ggplot()+geom_boxplot(aes(mundial,n,fill=mundial))+labs(y='Pases por partido',x='Mundial')+
  scale_fill_brewer(palette="Set1")

g8<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
    filter(period<5 & !type.id %in% eventos_irrelevantes & type.id==43)  %>%
    group_by(mundial,match_id) %>%
    summarise(n=n()) %>%  ungroup() %>% ggplot()+geom_boxplot(aes(mundial,n,fill=mundial))+labs(y='Carries por partido',x='Mundial')+
  scale_fill_brewer(palette="Set1")

g3+g4+g8


pases_pos_gral<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
  filter(period<5 & !type.id %in% eventos_irrelevantes & type.id==30 & 
           possession_team.name==team.name) %>% 
  group_by(mundial,match_id, possession) %>%
  summarise(cantidad_pases = n()) %>% 
  ungroup() %>% group_by(mundial) %>% 
  summarise(promedio_pases = mean(cantidad_pases)) 

g5<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
    filter(period<5 & !type.id %in% eventos_irrelevantes & possession_team.name==team.name & type.id==30)  %>%
    group_by(mundial,match_id, possession) %>%
  summarise(cantidad_pases = n()) %>% 
  ungroup() %>% 
  ggplot()+geom_boxplot(aes(mundial,cantidad_pases,fill=mundial))+labs(y='Pases por posesión',x='Mundial')+
  scale_fill_brewer(palette="Set1")+
  coord_flip()

g6<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
    filter(period<5 & !type.id %in% eventos_irrelevantes & possession_team.name==team.name & type.id==30& is.na(pass.outcome.name))  %>%
    group_by(mundial,match_id) %>%
  summarise(cantidad_pases = n()) %>% 
  ungroup() %>% 
  ggplot()+geom_boxplot(aes(mundial,cantidad_pases,fill=mundial))+labs(y='Pases exitosos por partido',x='Mundial')+
  scale_fill_brewer(palette="Set1")+
  coord_flip()

g7<-d %>% mutate(mundial='M') %>% bind_rows(mutate(d_mundialfem,mundial='F')) %>% 
    filter(period<5 & !type.id %in% eventos_irrelevantes & possession_team.name==team.name & type.id==30& is.na(pass.outcome.name))  %>%
    group_by(mundial,match_id,possession) %>%
  summarise(cantidad_pases = n()) %>% 
  ungroup() %>% 
  ggplot()+geom_boxplot(aes(mundial,cantidad_pases,fill=mundial))+labs(y='Pases exitosos por posesión',x='Mundial')+
  scale_fill_brewer(palette="Set1")+
  coord_flip()
g6/g7

```

Por lo tanto, nuestra observaciones pasarán a ser las posesiones y no los distintos eventos. A estos efectos, con la información contenida en los datos de *eventing* se conformó una base que nos permite describir cada una de estas secuencias para su posterior estudio y clasificación. Para ello, en una primera instancia, no se trabajará con todas las posesiones sino que por simplicidad nos quedaremos únicamente con aquellas posesiones en las cuales las acciones en las mismas son realizadas por el equipos poseedor del balón o, en su defecto, que las acciones del rival no involucren directamente la pelota: acciones de presión, faltas cometidas o recibidas, atajadas del golero y/o jugadores dribleados del conjunto que está defendiendo (*Dribbled Past*). De esta manera, la trayectoria de la pelota se ve únicamente afectada por las acciones realizadas por el equipo que tiene la posesión y no por el rival. Nos quedaremos finalmente con 4961 posesiones a nivel masculino y 4409 del mundial femenino para estudiar la trayectoria de la pelota en esas secuencias.

## Características de las posesiones

A través de los datos se generará una nueva base que contenga características de las casi 10000 secuencias a estudiar. La elección de dichas características es un tanto arbitraria pero se entiende que pueden ser de valor o utilidad a la hora de describir o encontrar ciertos patrones o estilos de juego:

-   coordenadas de inicio y fin de la posesión (así como las zonas de inicio y fin)

-   cantidad de pases y de traslados de balón (totales y exitosos)

-   cantidad de tiros, de centros, de cambios de frente, de ingresos al área rival con pelota controlado, pases dentro del área y de eventos en general realizados

-   promedio de avance en el terreno según sea por pases o traslados con pelota controlada

-   si la jugada es iniciada por el golero

-   si el golero participa o no de la secuencia

-   si termina en un tiro al arco o en gol

-   velocidad promedio de la posesión teniendo en cuenta los pases y conducciones hacia adelante

-   distancia promedio y mediana de la jugada

-   cantidad de zonas por la que pasa la jugada

-   duración (en segundos) de la posesión

```{r correlaciones, echo=FALSE,message=FALSE,warning=FALSE,fig.cap='Correlaciones de las caracteristicas de las trayectorias'}
trayectoriasM<-trayM %>% 
  select(-c(timestamp,segs_corr,type.id,type.name,avance_p,avance_c,player.id,player.name)) %>% 
  group_by(match_id,possession) %>% 
  summarise(across(everything(), first)) %>% ungroup() %>% 
  mutate(prom_av_p=ifelse(is.nan(prom_av_p),0,prom_av_p),
         prom_av_t=ifelse(is.nan(prom_av_t),0,prom_av_t),
         vel_media_p=ifelse(is.nan(vel_media_p)|is.infinite(vel_media_p),0,vel_media_p),
         vel_media_c=ifelse(is.nan(vel_media_c)|is.infinite(vel_media_c),0,vel_media_c))
trayectoriasF<-trayF %>% 
  select(-c(,type.id,type.name,avance_p,avance_c,player.id,player.name)) %>% 
  group_by(match_id,possession) %>% 
  summarise(across(everything(), first)) %>% ungroup() %>% 
  mutate(prom_av_p=ifelse(is.nan(prom_av_p),0,prom_av_p),
         prom_av_t=ifelse(is.nan(prom_av_t),0,prom_av_t),
         vel_media_p=ifelse(is.nan(vel_media_p)|is.infinite(vel_media_p),0,vel_media_p),
         vel_media_c=ifelse(is.nan(vel_media_c)|is.infinite(vel_media_c),0,vel_media_c))
  
trayectoriasM %>%
  select(tiempo, n_eventos, n_pases, n_pasesC, n_traslados, n_driblesE, prom_av_p,
         prom_av_t, n_jugadores, n_centros, n_cdf, n_pases_arearival,
         n_ingresos_arearival, inicia_golero, participa_golero, termina_tiro,
         tiro, gol, zona_fin, nzonas, xG, vel_media_p, vel_media_c,
         vert_tot, horiz_tot, termina) %>%
  rbind(
    trayectoriasF %>%
      select(tiempo, n_eventos, n_pases, n_pasesC, n_traslados, n_driblesE, prom_av_p,
             prom_av_t, n_jugadores, n_centros, n_cdf, n_pases_arearival,
             n_ingresos_arearival, inicia_golero, participa_golero, termina_tiro,
             tiro, gol, zona_fin, nzonas, xG, vel_media_p, vel_media_c,
             vert_tot, horiz_tot, termina)
  ) %>%
  mutate(termina = ifelse(termina == "rival", 0, 1)) %>%
  cor(method = 'spearman') %>%
  round(4) %>%
  ggcorrplot()

```

### División en zonas

También podría ser útil tener en consideración no sólo dónde inició y terminó cada jugada sino que también de alguna manera replicar la trayectoria de la pelota en la secuencia. Para ello, se propone dividir la cancha en zonas y analizar hacia dónde el equipo llevó el balón y por cuántos sectores (zonas) del terreno pasó la pelota en la jugada. Cabe aclarar que para el conteo de zonas se tendrá en cuenta únicamente aquellas zonas dónde se realizaron acciones y no necesariamente por dónde pasó la pelota.

```{r trayy,echo=FALSE,warning=FALSE,message=FALSE,eval=FALSE}
cortes_tray<-c(2,4,6,8,9,10,14,16,24,28,30,33,37,38,42,43) 
jugada_siguiente<-d %>% group_by(match_id,possession) %>% 
  summarise(tipo=first(play_pattern.name),eq=first(team.name)) %>% 
  mutate(jugada_siguiente=lead(tipo),eq_sig=lead(eq)) %>% select(-tipo)



graf<-trayM %>% ungroup() %>%  group_by(possession) %>% 
  filter(match_id==3857270  ) %>% 
  select(match_id,possession,termina) %>% distinct() %>% 
  inner_join(d,by=c("match_id","possession")) %>% 
  filter((sum(type.id==30)>0|sum(type.id==43)>0) & 
           !type.id%in% eventos_irrelevantes) %>% 
  ungroup() %>% 
  select(match_id,minute,second,period,possession,possession_team.name,team.name,type.name,player.name,
         under_pressure,location.x,location.y,pass.end_location.x,pass.end_location.y,
         carry.end_location.x,carry.end_location.y,play_pattern.name,resultado,pass.outcome.name,
         ball_receipt.outcome.name,duel.outcome.name,dribble.outcome.name,
         interception.outcome.name,shot.end_location.x,shot.end_location.y,shot.outcome.name,termina) %>% 
  mutate(loc.y=80-location.y,
         pass.end_loc.y=80-pass.end_location.y,
         carry.end_loc.y=80-carry.end_location.y,
         end.x=ifelse(type.name=="Pass",pass.end_location.x,ifelse(type.name=="Carry",carry.end_location.x,
                                                              location.x)),
         end.y=ifelse(type.name=="Pass",pass.end_loc.y,ifelse(type.name=="Carry",carry.end_loc.y,
                                                              loc.y))) %>% mutate(exitoso=ifelse(is.na(pass.outcome.name),"si","no")) 




ggplot()+geom_segment(aes(x=location.x,xend=end.x,y=loc.y,
                          yend=end.y,color=termina),filter(graf,possession_team.name==team.name&
                                                               type.name%in%c("Pass","Carry")))+
  geom_point(aes(location.x,loc.y,color=termina),filter(graf,possession_team.name==team.name&
                                                            !type.name%in%c("Pass","Carry")))+
  geom_segment(aes(x=location.x,xend=shot.end_location.x,y=loc.y,
                   yend=80-shot.end_location.y,color=termina),linetype = 2,filter(graf,possession_team.name==team.name&
                                                                                      type.name=="Shot"))+
  geom_segment(aes(x=x,xend=xend,y=y,yend=yend),data=lineas)+
  facet_wrap(~possession_team.name)+
  labs(caption='Sentido del ataque de izquierda a derecha')+theme(legend.position = "bottom")

```

```{r}

```

```{r graf zonas,echo=FALSE,fig.cap='División en zonas de la cancha',warning=FALSE,message=FALSE,fig.align='center'}
grid.arrange(grafz(30),grid.arrange(grafz(3),grafz(8),ncol=1),ncol=2)
```

```{r tray,echo=FALSE,warning=FALSE,message=FALSE}
graf<-trayM %>% ungroup() %>%  group_by(possession) %>% 
  filter(match_id==3857264 & possession==112) %>% 
  select(match_id,possession,termina) %>% distinct() %>% 
  inner_join(d,by=c("match_id","possession")) %>% 
  filter((sum(type.id==30)>0|sum(type.id==43)>0) & 
           !type.id%in% eventos_irrelevantes) %>% 
  ungroup() %>% 
  select(match_id,minute,second,period,possession,possession_team.name,team.name,type.name,player.name,
         under_pressure,location.x,location.y,pass.end_location.x,pass.end_location.y,
         carry.end_location.x,carry.end_location.y,play_pattern.name,resultado,pass.outcome.name,
         ball_receipt.outcome.name,duel.outcome.name,dribble.outcome.name,
         interception.outcome.name,shot.end_location.x,shot.end_location.y,shot.outcome.name,termina) %>% 
  mutate(loc.y=80-location.y,
         pass.end_loc.y=80-pass.end_location.y,
         carry.end_loc.y=80-carry.end_location.y,
         end.x=ifelse(type.name=="Pass",pass.end_location.x,ifelse(type.name=="Carry",carry.end_location.x,
                                                              location.x)),
         end.y=ifelse(type.name=="Pass",pass.end_loc.y,ifelse(type.name=="Carry",carry.end_loc.y,
                                                              loc.y))) %>% mutate(exitoso=ifelse(is.na(pass.outcome.name),"si","no")) 

ggplot()+geom_segment(aes(x=location.x,xend=end.x,y=loc.y,
                          yend=end.y,color=type.name),filter(graf,possession_team.name==team.name&
                                                               type.name%in%c("Pass","Carry")))+
  geom_point(aes(location.x,loc.y,color=type.name),filter(graf,possession_team.name==team.name&
                                                            !type.name%in%c("Pass","Carry","Pressure","Goal Keeper",
                                                                            "Foul Committed","Foul Won","Miscontrol")))+
  geom_segment(aes(x=location.x,xend=shot.end_location.x,y=loc.y,
                   yend=80-shot.end_location.y,color=type.name),linetype = 2,filter(graf,possession_team.name==team.name&
                                                                                                       type.name=="Shot"))+
  geom_segment(aes(x=x,xend=xend,y=y,yend=yend),data=lineas)+
  facet_wrap(~possession_team.name)+
  geom_segment(aes(x=0,xend=120,y=0,yend=0))+
geom_segment(aes(x=0,xend=120,y=80,yend=80))+
geom_segment(aes(x=0,xend=0,y=0,yend=80))+
geom_segment(aes(x=120,xend=120,y=0,yend=80))+
geom_segment(aes(x=60,xend=60,y=0,yend=80))+
geom_segment(aes(x=0,xend=120,y=62,yend=62))+
geom_segment(aes(x=0,xend=120,y=18,yend=18))+
geom_segment(aes(x=0,xend=120,y=30,yend=30))+
geom_segment(aes(x=0,xend=120,y=50,yend=50))+
geom_segment(aes(x=18,xend=18,y=0,yend=80))+
geom_segment(aes(x=39,xend=39,y=0,yend=80))+
geom_segment(aes(x=102,xend=102,y=0,yend=80))+
geom_segment(aes(x=81,xend=81,y=0,yend=80)) +
  labs(caption='Sentido del ataque de izquierda a derecha')+
  theme(legend.position = "bottom")

```

```{r gr,echo=FALSE,fig.width=9,eval=FALSE}
a<-duracion_pos2 %>% group_by(possession_team.id) %>% summarise(suma=sum(duracion_pos))
trayectoriasM %>% 
  bind_rows( trayectoriasF) %>% 
  filter(prom_av_p>0&prom_av_t>0) %>% 
  left_join(a,by="possession_team.id") %>% 
  ggplot()+geom_point(aes(prom_av_p,prom_av_t,color=suma))+facet_wrap(~resultado)+labs(x='Avance prom pases',
                                                                                       y='Avance prom conducc')


trayectoriasM %>% 
  bind_rows( trayectoriasF) %>% 
  filter(prom_av_p>0&prom_av_t>0) %>% 
  left_join(select(duracion_pos2,c(match_id,possession_team.id,duracion_pos)),by=c("match_id","possession_team.id")) %>% 
  ggplot()+geom_point(aes(prom_av_p,prom_av_t,color=duracion_pos))+facet_wrap(mundial~resultado)+labs(x='Avance prom pases',
                                                                                       y='Avance prom conducc')
```

```{r}
#| output: false
df <- read_excel("./data/trayectorias.xlsx") %>%
  select(-c(termina, gol, tiro, termina_tiro, participa_golero)) %>%
  mutate(exito = factor(exito, levels = c(1, 0), labels = c("1", "0")))

df_split <- initial_split(df)
train <- training(df_split)
test <- testing(df_split)

all_cores <- parallel::detectCores(logical = FALSE)
registerDoParallel(cores = all_cores)
```

## Idea del modelo

El objetivo del modelo es clasificar las jugadas en exitosas o no exitosas, con un criterio de éxito definido subjetivamente. Para ello, se analizarán distintas características de cada jugada, buscando identificar las variables que permitan predecir con mayor precisión si una jugada será exitosa o no.

Después de la descripción de los datos, se propone la creación de una variable objetivo (a predecir) denominada *éxito*, que tomará un valor binario para representar el éxito o fracaso de cada jugada.

A continuación, se realizará un análisis exploratorio de datos (EDA) enfocado en esta variable, observando cómo se comporta en función de las características de las jugadas. Este análisis permitirá identificar patrones y relaciones que puedan ser útiles en la clasificación y mejora del rendimiento del modelo.

La variable éxito se define a partir de la categorización de las jugadas:

-   Si la jugada termina en un tiro al arco

-   Si la jugada termina en un córner a favor

-   Si la mayoría de las acciones se realizan bajo presión del rival y pese a ello se logra mantener la posesión

-   Si la secuencia logra llegar hasta el área rival

-   Si la posesión comienza en campo propio y logra llevar al tercio final con al menos 3 acciones

-   Si el rival no logra recuperar la pelota y comete falta

Tanto las trayectorias en las que el rival logra recuperar la pelota así como aquellas que no cumplen ninguna de las 6 condiciones mencionadas se califican como *no exitosas* (variable exito=0)

## Variables a usar

```{r}
#| echo: false
variables_info <- data.frame(
  Variable = c("possession","tiempo", "period", "possession_team.id", "possession_team.name", 
               "team.name","n", "x_inicio", "y_inicio", "x_fin", "y_fin", "n_eventos", 
               "n_pases", "n_pasesC", "n_traslados", "prom_av_p", "prom_av_t", 
               "n_jugadores", "n_centros", "n_cdf", "n_pases_arearival", 
               "n_ingresos_arearival", "inicia_golero", "resultado", "zona_inicio", 
               "zona_fin", "xG", "vel_media_p", "vel_media_c","mundial","vert_tot","horiz_tot","dist.promP","dist.promC","dist.medP","dist.medC","presion","n_eq", "exito"),
  
  Descripcion = c("ID de la posesión","Duración en segs de la jugada", "Período del partido", "ID del equipo en posesión",
                  "Nombre del equipo en posesión", "Nombre del equipo","Cantidad de acciones de la jugada", "Coordenada X de inicio de la jugada",
                  "Coordenada Y de inicio de la jugada", "Coordenada X de fin de la jugada", "Coordenada Y de fin de la jugada",
                  "Número de eventos distintos", "Número de pases", "Número de pases completados",
                  "Número de traslados", "Promedio de avance por pase realizado", "Promedio de avance por traslado realizado",
                  "Número de jugadores que participan en la jugada", "Cantidad de centros", "Cantidad de cambios de frente",
                  "Número de pases dentro del área rival", "Número de ingresos al área rival",
                  "Si la jugada inicia con el golero", "Estado del marcador al momento de la jugada",
                  "Zona de inicio de la jugada", "Zona de fin de la jugada", "Probabilidad de gol de la jugada (Expected Goal)", 
                  "Velocidad media de los pases", "Velocidad media de los traslados","Mundial al que pertenece el partido","Verticalidad total de la posesión","Horizaontalidad total de la posesión","Distancia promedio de los pases","Distancia promedio de los trasldos","Distancia mediana de los pases","Distancia mediana de los traslados","Cantidad de acciones que se realizan bajo presión del rival","Cantidad de acciones del equipo que tiene la posesión","Éxito (o no) de la posesión"),
  
  Tipo = c("Numérica", "Categórica", "Numérica", "Categórica", "Categórica", "Numérica",
           "Numérica", "Numérica", "Numérica", "Numérica", "Numérica", "Numérica", 
           "Numérica", "Numérica", "Numérica", "Numérica", "Numérica", "Numérica",
           "Numérica", "Numérica", "Binaria", "Categórica", "Categórica", "Categórica", 
           "Numérica", "Numérica", "Numérica","Númerica","Númerica","Binaria","Númerica","Númerica","Númerica","Númerica","Númerica","Númerica","Númerica","Númerica" ,"Binaria"), 
  Rango=c("2:283","0:137.71","1:4","","","","2:146","0.4:120.5","0:79.9","0.1:120","0:79.9","1:11","0:51","0:51","0:38","-30.5:104.9","-17.4:56.9","1:17","0:3","0:4","0:3","0:2","0: no inicia golero, 1: inicia golero","'Empatando', 'Ganando','Perdiendo'","1:30","1:30","0:0.92805","-0.72:1067.5","0:2275","M='Masculino',F='Femenino'","-119.6:116.4","-79.90:79.40","0:108.08","0:62.614","0:108.06","0:62.614","0:23","1:142","0: no éxito, 1: éxito")
)



variables_info %>%
  gt() %>%
  tab_header(
    title = md("**Características de las Variables para el Modelo**")
  ) %>%
  cols_label(
    Variable = md("**Variable**"),
    Descripcion = md("**Descripción**"),
    Tipo = md("**Tipo**"),
    Rango = md("**Rango**")
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "all",
      color = "gray",
      weight = px(1)
    ),
    locations = cells_body()
  ) %>%
  cols_align(
    align = "left",
    columns = c(Variable, Descripcion)
  ) %>%
  cols_align(
    align = "center",
    columns = c(Tipo)
  ) %>%
  tab_options(
    table.width = pct(100),
    column_labels.background.color = "gray95",
    table.border.top.width = px(3),
    table.border.bottom.width = px(3)
  )

```

## EDA

```{r}
#| echo: false
df = df %>%  mutate(diff_x = x_inicio - x_fin, diff_y = y_inicio - y_fin) 
```

```{r}
#| echo: false
df  %>% ggplot(aes( x = exito, y = diff_x)) + geom_violin(fill = "skyblue")  + labs(y = "Diferencia X" , title = "Distribución de la diferencia en X entre las jugadas exitosas y no exitosas")
```

Se observa una dispersión mayor en la diferencia en el eje X en las jugadas exitosas respecto de las no exitosas. Además, se observa que la mayoria de las jugadas exitosas están concentradas en torno al 0, lo cual tiene sentido ya que son dichas secuencias empiezan y terminan en el mismo lugar.

```{r}
#| echo: false
df  %>% ggplot(aes( x = exito, y = diff_y)) + geom_violin(fill = "skyblue") + labs(y = "Diferencia Y")
```


En este caso el comportamiento no es diferente entre las jugadas que son exitosas y las que no.



```{r}
df  %>% ggplot(aes( x = diff_x, y = diff_y)) + geom_hex() + labs(y = "Diferencia Y" , title = "Distribución de la diferencia en Y entre las jugadas exitosas y no exitosas") + facet_wrap(~exito)
```

Se observa que los puntos estan concentrados alrededor de 0,0 lo que implica que la mayoria de las jugas terminan cerca de la posición inicial de la jugada. Lo que llama la atencion es que en las jugadas exitosas, estan mas dispersas en el eje x, teniendo un concentracion mayor en juhagas con diferencias en x mayores a 0. Lo cual indica que estas jugadas se caracerizan por tener un mayor a avance al arco rival.

Aunque en el modelo se quita la variable x_fin para no dar información sobre la posicion final de la jugada, es interesante ver el comportamiento del mismo.

```{r}
library(ggmosaic)
df %>%
  ggplot() +
  geom_mosaic(aes(weight = 1, x = product(n_eventos), fill = exito)) +
  labs(
    title = "Distribución de posiciones iniciales de las jugadas exitosas y no exitosas",
    x = "Posiciones iniciales",
    y = "Éxito",
    fill = "Éxito"
  ) + theme_minimal() 
```

Se observa que, a medida que aumenta la cantidad de tipos distintos de jugadas, tienden a tener una mayor proporción de jugadas exitosas en comparación con las no exitosas. La mayoría de las jugadas se concentran en posiciones iniciales con 4 y 5 tipos distintos de jugadas, seguidas de aquellas con entre 1 y 3 tipos. Por otro lado, las posiciones iniciales con más de 5 tipos distintos presentan la menor concentración de jugadas en general.

```{r}
df  %>% ggplot(aes(x = vert_tot , y = `dist.promP`)) + geom_hex() + facet_wrap(~exito) + labs(x = "Verticalidad promedio",y = "Distancia promedio de los pases" , title = 'Verticalidad Total vs Distancia Promedio de los pases')
```

En las jugadas exitosas, se observa una mayor concentración de pases con distancias promedio moderadas (20-40) y una verticalidad más dispersa, lo que sugiere que las jugadas exitosas tienden a tener una distancio promedio ne pases menor que en las no exitosas. Aunque tanto las jugadas exitosas como las no exitosas se concentran en verticalidades positivas , esto parece natural con el deporte.
```{r}
#| echo: false
df %>%
  ggplot(aes(x = exito, y = tiempo)) +
  geom_violin(fill = "skyblue") +
  labs(x = "Éxito", y = "Tiempo")
```

Aunque la mayoría de las jugadas tanto exitosas como no exitosas se concentran cercanas a tiempo 0 , la concentración en 0 es mucho mayor en las jugadas que no exitosas.

```{r}
df %>%
  group_by(n, exito) %>% 
  summarise(
    mean_ratio = mean(n_eq / n),
    count = n(),
    .groups = "drop"
  ) %>%
  ggplot(aes(x = n, y = mean_ratio, color = count)) +
  geom_point(alpha = 0.7) +
  facet_wrap(~exito) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
  scale_color_gradient(low = "blue", high = "red") +
  labs(
    x = "Número de jugadas",
    y = "Proporción de jugadas",
    size = "Frecuencia",
    color = "Frecuencia",
    title = "Relación entre jugadas y proporción jugadas equipos por éxito"
  ) 
```

Se observa que la mayoría de las jugadas están concentradas en una cantidad relativamente pequeña de jugadas, independientemente de si son exitosas o no. En el rango donde se concentran la mayor cantidad de jugadas (entre 0 y 50), las jugadas exitosas muestran una menor proporción de participación del equipo que tiene la pelota, en comparación con las jugadas no exitosas. Además, se nota que, a medida que aumenta el número de jugadas, la proporción de participación del equipo que tiene la pelota tiende a estabilizarse cerca de 1, particularmente en las jugadas exitosas. Por otro lado, la densidad más alta se encuentra en jugadas con pocas repeticiones, como lo refleja el gradiente de color, indicando que las observaciones más frecuentes corresponden a situaciones menos complejas. Esto sugiere que el éxito de las jugadas podría estar influenciado por un número limitado de interacciones o decisiones rápidas en contextos menos densos de jugadas.

Este punto es muy interesane ya que por un lado mayor variedad de eventos mayor es la proporcion de éxito, sin embargo las jugadas se conentran en poco eventos. Lo que de alguna forma da la pauta que las jugadas exitosas son aquellas que hace de todo un poco en pa cantidad de eventos. Lo que naturalmente hace interesante ver la duración de las jugadas.
```{r}
df %>%
  mutate(tiempo_bin = cut(tiempo, breaks = seq(min(tiempo), max(tiempo), by = 10), include.lowest = TRUE),
         tiempo_bin_mid = as.numeric(sub("\\((.+),.*", "\\1", tiempo_bin)) + 
                          (as.numeric(sub(".*,(.+)\\]", "\\1", tiempo_bin)) - as.numeric(sub("\\((.+),.*", "\\1", tiempo_bin))) / 2) %>%
  group_by(tiempo_bin_mid, exito) %>%
  summarise(
    mean_ratio = mean(n_eventos),
    count = n(),
    .groups = "drop"
  ) %>%
  ggplot(aes(x = tiempo_bin_mid, y = mean_ratio, color = count)) +
  geom_point(alpha = 0.7) +
  facet_wrap(~exito) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
  scale_color_gradient(low = "blue", high = "red") +
  labs(
    x = "Tiempo (continuo)",
    y = "Promedio de eventos",
    size = "Frecuencia",
    color = "Frecuencia",
    title = "Relación entre tiempo y promedio de eventos por éxito"
  ) 
```

 En las jugadas exitosas, se observa un incremento constante en el promedio de eventos a medida que aumenta el tiempo, comenzando alrededor de 5 eventos y alcanzando más de 7 en los intervalos de mayor duración. Por otro lado, las jugadas no exitosas tienen un promedio de eventos más bajo, comenzando cerca de 4 y mostrando un aumento más gradual e irregular. Además, la frecuencia de jugadas (representada por el tamaño y color de los puntos) disminuye notablemente conforme el tiempo aumenta, indicando que las jugadas más largas son menos comunes en ambos casos. Estos patrones sugieren que las jugadas exitosas tienden a ser más complejas y dinámicas, involucrando un mayor número de eventos en comparación con las no exitosas.

```{r}
df  %>% ggplot(aes(x = tiempo, y = n)) + geom_point(alpha = 0.7) + facet_wrap(~exito) + labs(x = "Tiempo de jugada (segs)", y = "Número de jugadas", title = "Tiempo vs Número de Jugadas")
```

Hay una relación bastante lineal entre el tiempo de jugada y el número total de eventos. 

```{r}
#| echo: false
df  %>% ggplot(aes(x = n_pases)) + geom_histogram(bins = 20 , fill = "skyblue" , color = "black") + facet_wrap(~exito) + labs(y = "Número de pases")
```

```{r}
#| echo: false
df  %>% ggplot(aes(x = n_pasesC)) + geom_histogram(bins = 20 , fill = "skyblue" , color = "black") + facet_wrap(~exito) + labs(y = "Número de pases completados")
```

Aunque los histogramas son similares, no es un detalle menor la moda de la cantidad de pases en la jugada, que es mayor en las secuencias exitosas que en las no exitosas.

```{r}
#| echo: false
df  %>% ggplot(aes( x = exito, y = n_jugadores)) + geom_violin(fill = "skyblue")  + labs(y = "Número de jugadores")
```

```{r}
#| echo: false
df  %>% ggplot(aes( x = exito, y = n_traslados)) + geom_violin(fill = "skyblue")  + labs(y = "Número de traslado")
```

Tanto en la cantidad de traslados como en la cantidad de jugadores que participan en la jugada, se observa una mayor concentración de valores cercanos a 0 en las jugadas que no son exitosas.

```{r,eval=FALSE}
graf2<-trayM %>% mutate(mundial='m') %>% 
  rbind(trayF %>% mutate(mundial='F')) %>% ungroup() %>%  group_by(possession) %>% 
  select(match_id,possession,termina) %>% distinct() %>% 
  inner_join(d,by=c("match_id","possession")) %>% 
  filter((sum(type.id==30)>0|sum(type.id==43)>0) & 
           !type.id%in% eventos_irrelevantes) %>% 
  ungroup() %>% 
  select(match_id,minute,second,period,possession,possession_team.name,team.name,type.name,player.name,
         under_pressure,location.x,location.y,pass.end_location.x,pass.end_location.y,
         carry.end_location.x,carry.end_location.y,play_pattern.name,resultado,pass.outcome.name,
         ball_receipt.outcome.name,duel.outcome.name,dribble.outcome.name,
         interception.outcome.name,shot.end_location.x,shot.end_location.y,shot.outcome.name,termina,mundial) %>% 
  mutate(loc.y=80-location.y,
         pass.end_loc.y=80-pass.end_location.y,
         carry.end_loc.y=80-carry.end_location.y,
         end.x=ifelse(type.name=="Pass",pass.end_location.x,ifelse(type.name=="Carry",carry.end_location.x,
                                                              location.x)),
         end.y=ifelse(type.name=="Pass",pass.end_loc.y,ifelse(type.name=="Carry",carry.end_loc.y,
                                                              loc.y))) %>% mutate(exitoso=ifelse(is.na(pass.outcome.name),"si","no")) 

graf2 %>% 
  # mutate(mundial='M') %>% 
  # bind_rows(graf2) %>% 
  select(match_id,possession,location.x,loc.y,
         termina,mundial) %>%
  bind_rows(graf2 %>% select(location.x=end.x,loc.y=end.y,cluster,termina) %>% mutate(mundial='M')) %>% 
  filter(termina %in%c("area rival","tiro")) %>% 
  ggplot() +
  stat_density_2d(aes(x = location.x, y = loc.y, fill = after_stat(density)), geom = "tile", contour = FALSE) +
  geom_segment(aes(x=x,xend=xend,y=y,yend=yend),color='white',data=lineas)+
  labs(title = "", 
       x = "", y = "") +
  scale_fill_viridis_c()+
  facet_grid(termina~mundial)+theme(axis.text = element_blank(),
                             axis.ticks = element_blank())

```

## Modelos

Se proponen 3 modelos distintos para el problema de clasificación de la variable *éxito*. Un modelo logístico, un Random Forest (RF) y un LightGBM (LGBM). La idea es usar la regresión logística para entender como influyen los distintos factores en la variable *éxito* sin perder la interpretabilidad de los resultados. Los otros dos se proponen con la idea de predecir dicha variable usando la información que se tiene en el conjunto de datos. Se eligen estos modelos uno produce menos sobreajuste (RF) mientras que el otro produce un menor error en la validación (LGBM).

```{r}
#| output: false
library(tidymodels)
library(tidyverse)
library(agua)
library(h2o)
library(readxl)
library(knitr)
library(rpart.plot)
library(yardstick)
library(tidymodels)
library(xgboost)
library(lightgbm)
library(baguette) 
library(bonsai)
library(gt)
library(vip)
library(doParallel)
library(knitr)
library(glmnet)
library(yardstick)
library(vip)
library(DALEXtra)
library(tidymodels)
library(readxl)
library(doParallel)
library(finetune)
library(bonsai)
library(vip)
library(DALEXtra)
library(here)


df <- read_csv("./models/data.csv")  %>%
  mutate(exito = factor(exito, levels = c(1, 0), labels = c("1", "0")))
train <- df %>% filter(dataset == "train")
test <- df %>% filter(dataset == "test")

ranking<-rbind(read_excel("data/ranking fifa.xlsx",sheet = 'Fem') %>% mutate(mundial='F'),read_excel("data/ranking fifa.xlsx",sheet = 'Masc') %>% mutate(mundial='M'))
```

# Modelos

Se proponenen 4 modelos distintos para el problema de clasificación de la variable exito. Una lasso, un árbol, un random forest y un LightGBM. La idea es usar la lasso para entender como influyen los distintos factores en la variable exito sin perder la interpretabilidad de los resultados. Los otros dos se proponen más con la idea de predecir la variable exito usando la información que se tiene en el conjunto de datos. Se eligen estos modelos uno produce menos overfitting(random forest) y otro produce menos error en la validación(LightGBM).

## Lasso

Se utiliza inicialmente un modelo de regresión logística como primer enfoque debido a su capacidad para proporcionar una interpretación clara y directa de las relaciones entre las variables predictoras y el resultado.

```{r}
lasso = readRDS("./models/base_recipe_lasso_model.rds")
random_forest = readRDS("./models/base_recipe_random_forest_model.rds")
lightgbm = readRDS("./models/base_recipe_lightgbm_model.rds")
decision_tree = readRDS("./models/base_recipe_decision_tree_model.rds")

lasso_tune_results <- readRDS("./models/base_recipe_lasso_tune_results.rds")
random_forest_tune_results <- readRDS("./models/base_recipe_random_forest_tune_results.rds")
lightgbm_tune_results <- readRDS("./models/base_recipe_lightgbm_tune_results.rds")
decision_tree_tune_results <- readRDS("./models/base_recipe_decision_tree_tune_results.rds")

```

```{r}
lasso %>% 
  fit(train)  %>% 
  extract_fit_engine()  %>% 
  vi()  %>% 
  ggplot(aes(x = Importance, y = reorder(Variable, Importance), fill = Sign)) +
  geom_col() +
  scale_x_continuous(expand = c(0, 0)) +
  labs(y = NULL)
```

```{r}
lasso %>% autoplot()
```

```{r}
lasso_tune_results %>% autoplot() 
```

### Matriz de Confusion

```{r}
lasso_predictions_test <- predict(lasso, new_data = test, type = "class") %>% bind_cols(test) 

lasso_conf_matrix_test <- conf_mat(
  data = lasso_predictions_test,
  truth = exito,          
  estimate = .pred_class  
)

autoplot(lasso_conf_matrix_test, type = "heatmap") +
  labs(
    title = "Matriz de Confusión - LASSO (Entrenamiento)",
    x = "Clase Predicha",
    y = "Clase Real"
  ) +
  theme_minimal()

```

## Arbol de Decisión

```{r}
decision_tree %>% extract_fit_engine() %>% rpart.plot(main = "Árbol de Decisión Ajustado")
```

```{r}
autoplot(decision_tree_tune_results)
```

```{r}
tree_predictions <- predict(decision_tree, new_data = train, type = "class") %>%
  bind_cols(train) 

tree_conf_matrix <- conf_mat(
  data = tree_predictions,
  truth = exito,          
  estimate = .pred_class  
)

autoplot(tree_conf_matrix, type = "heatmap") +
  labs(
    title = "Matriz de Confusión - Árbol de Decisión",
    x = "Clase Predicha",
    y = "Clase Real"
  ) +
  theme_minimal()

```

## Random Forest

### Visualización de la evolución de las métricas según los parámetros

```{r}
autoplot(random_forest_tune_results) +
  labs(
    title = "Evolución de las Métricas - Random Forest",
    x = "Hiperparámetros",
    y = "Métrica (ROC AUC, Accuracy, etc.)"
  ) + theme_minimal()
```

### Matriz de Confusion

```{r}
rf_predictions_train <- predict(random_forest, train) %>%
  bind_cols(train)

rf_conf_matrix_train <- conf_mat(
  data = rf_predictions_train,
  truth = exito,
  estimate = .pred_class
)

autoplot(rf_conf_matrix_train, type = "heatmap") +
  labs(
    title = "Matriz de Confusión - Random Forest (Entrenamiento)",
    x = "Clase Predicha",
    y = "Clase Real"
  ) +
  theme_minimal()
```

### Importancia de las variables

```{r}
random_forest %>%
  extract_fit_engine() %>%
  vip::vip(geom = "col", aesthetics = list(fill = "steelblue")) +
  labs(
    title = "Importancia de las Variables - Random Forest",
    x = "Importancia Relativa",
    y = "Variable"
  ) +
  theme_minimal()
```

## LightGBM

### Visualización de la evolución de las métricas según los parámetros

```{r}
autoplot(lightgbm_tune_results) +
  labs(
    title = "Evolución de las Métricas - LightGBM",
    x = "Hiperparámetros",
    y = "Métrica (ROC AUC, Accuracy, etc.)"
  ) +
  theme_minimal()
```

### Matriz de Confusion

```{r}
lgbm_predictions_train <- predict(lightgbm, train) %>%
  bind_cols(train)

lgbm_conf_matrix_train <- conf_mat(
  data = lgbm_predictions_train,
  truth = exito,
  estimate = .pred_class)

autoplot(lgbm_conf_matrix_train, type = "heatmap") +
  labs(
    title = "Matriz de Confusión - LightGBM (Entrenamiento)",
    x = "Clase Predicha",
    y = "Clase Real"
  ) +
  theme_minimal()
```

```{r}
lightgbm %>%
  extract_fit_engine() %>%
  vip::vip(geom = "col", aesthetics = list(fill = "steelblue")) +
  labs(
    title = "Importancia de las Variables - LightGBM",
    x = "Importancia Relativa",
    y = "Variable"
  ) +
  theme_minimal()
```

```{r}
lasso_predictions_training <- predict(lasso, train) %>%
  bind_cols(train)

tree_predictions <- predict(decision_tree, train) %>%
  bind_cols(train)

rf_predictions <- predict(random_forest, train) %>%
  bind_cols(train)

lgbm_predictions_train <- predict(lightgbm, train) %>% 
  bind_cols(train)
```

## Comparación de los modelos

```{r}
final_metrics <- metric_set(accuracy, sens, yardstick::spec, roc_auc)

calculate_model_metrics <- function(fit, split_data) {
  preds <- predict(fit, new_data = split_data, type = "class") %>%
    bind_cols(predict(fit, new_data = split_data, type = "prob")) %>%
    bind_cols(truth = split_data$exito)
  
  metrics_df <- final_metrics(
    data = preds, 
    truth = truth,
    estimate = .pred_class,
    .pred_1
  )
  
  return(metrics_df)
}

lasso_metrics <- calculate_model_metrics(lasso, train)
tree_metrics <- calculate_model_metrics(decision_tree, train)
rf_metrics <- calculate_model_metrics(random_forest, train)
lgbm_metrics <- calculate_model_metrics(lightgbm, train)

model_performance <- bind_rows(
  Lasso = lasso_metrics,
  `Decision Tree` = tree_metrics,
  `Random Forest` = rf_metrics,
  LightGBM = lgbm_metrics,
  .id = "Model"
) %>%
  select(Model, .metric, .estimate) %>%
  pivot_wider(names_from = .metric, values_from = .estimate)

model_performance %>%
  gt() %>%
  fmt_number(
    columns = c(accuracy, sens, spec, roc_auc),
    decimals = 3
  ) %>%
  cols_label(
    accuracy = "Accuracy",
    sens = "Sensitivity",
    spec = "Specificity",
    roc_auc = "ROC AUC"
  ) %>%
  tab_header(
    title = "Model Performance Metrics"
  )
```

## Datos de testeo

```{r}
lasso_metrics <- calculate_model_metrics(lasso, test)
tree_metrics <- calculate_model_metrics(decision_tree, test)
rf_metrics <- calculate_model_metrics(random_forest, test)
lgbm_metrics <- calculate_model_metrics(lightgbm, test)

model_performance <- bind_rows(
  Lasso = lasso_metrics,
  `Decision Tree` = tree_metrics,
  `Random Forest` = rf_metrics,
  LightGBM = lgbm_metrics,
  .id = "Model"
) %>%
  select(Model, .metric, .estimate) %>%
  pivot_wider(names_from = .metric, values_from = .estimate)

model_performance %>%
  gt() %>%
  fmt_number(
    columns = c(accuracy, sens, spec, roc_auc),
    decimals = 3
  ) %>%
  cols_label(
    accuracy = "Accuracy",
    sens = "Sensitivity",
    spec = "Specificity",
    roc_auc = "ROC AUC"
  ) %>%
  tab_header(
    title = "Model Performance Metrics"
  )
```

## Distriubución de posiciones iniciales

```{r}
df %>%
  ggplot(aes(x = x_inicio, y = y_inicio)) +
  geom_bin2d(bins = 15) +
  scale_fill_gradient(low = "blue", high = "red") + 
geom_segment(aes(x=0,xend=120,y=0,yend=0))+
geom_segment(aes(x=0,xend=120,y=80,yend=80))+
geom_segment(aes(x=0,xend=0,y=0,yend=80))+
geom_segment(aes(x=120,xend=120,y=0,yend=80))+
geom_segment(aes(x=60,xend=60,y=0,yend=80))+
geom_segment(aes(x=0,xend=120,y=62,yend=62))+
geom_segment(aes(x=0,xend=120,y=18,yend=18))+
geom_segment(aes(x=0,xend=120,y=30,yend=30))+
geom_segment(aes(x=0,xend=120,y=50,yend=50))+
geom_segment(aes(x=18,xend=18,y=0,yend=80))+
geom_segment(aes(x=39,xend=39,y=0,yend=80))+
geom_segment(aes(x=102,xend=102,y=0,yend=80))+
geom_segment(aes(x=81,xend=81,y=0,yend=80)) +
theme(legend.position = "bottom") + facet_wrap(~exito) + coord_flip() + 
  labs(title = "Posiciones de inicio segun exito", x = "Coordenada X", y = "Coordenada Y")
```

## Ver donde se equivoca el Random Forest

```{r}
temp = predict(random_forest, new_data = train, type = "class") %>%
  bind_cols(predict(random_forest, new_data = train, type = "prob")) %>%
  bind_cols(train)

temp %>% filter(exito != .pred_class) %>%
  ggplot(aes(x = x_inicio, y = y_inicio)) +
  geom_bin2d(bins = 15) +
  scale_fill_gradient(low = "blue", high = "red") + 
geom_segment(aes(x=0,xend=120,y=0,yend=0))+
geom_segment(aes(x=0,xend=120,y=80,yend=80))+
geom_segment(aes(x=0,xend=0,y=0,yend=80))+
geom_segment(aes(x=120,xend=120,y=0,yend=80))+
geom_segment(aes(x=60,xend=60,y=0,yend=80))+
geom_segment(aes(x=0,xend=120,y=62,yend=62))+
geom_segment(aes(x=0,xend=120,y=18,yend=18))+
geom_segment(aes(x=0,xend=120,y=30,yend=30))+
geom_segment(aes(x=0,xend=120,y=50,yend=50))+
geom_segment(aes(x=18,xend=18,y=0,yend=80))+
geom_segment(aes(x=39,xend=39,y=0,yend=80))+
geom_segment(aes(x=102,xend=102,y=0,yend=80))+
geom_segment(aes(x=81,xend=81,y=0,yend=80)) +
theme(legend.position = "bottom") +
  labs(title = "Errores en los datos de entrenamiento") + coord_flip() 
```

## Errores en el testeo

```{r}
temp = predict(random_forest, new_data = test, type = "class") %>%
  bind_cols(predict(random_forest, new_data = test, type = "prob")) %>%
  bind_cols(test)

temp %>% filter(exito != .pred_class) %>%
  ggplot(aes(x = x_inicio, y = y_inicio)) +
  geom_bin2d(bins = 15) +
  scale_fill_gradient(low = "blue", high = "red") + 
geom_segment(aes(x=0,xend=120,y=0,yend=0))+
geom_segment(aes(x=0,xend=120,y=80,yend=80))+
geom_segment(aes(x=0,xend=0,y=0,yend=80))+
geom_segment(aes(x=120,xend=120,y=0,yend=80))+
geom_segment(aes(x=60,xend=60,y=0,yend=80))+
geom_segment(aes(x=0,xend=120,y=62,yend=62))+
geom_segment(aes(x=0,xend=120,y=18,yend=18))+
geom_segment(aes(x=0,xend=120,y=30,yend=30))+
geom_segment(aes(x=0,xend=120,y=50,yend=50))+
geom_segment(aes(x=18,xend=18,y=0,yend=80))+
geom_segment(aes(x=39,xend=39,y=0,yend=80))+
geom_segment(aes(x=102,xend=102,y=0,yend=80))+
geom_segment(aes(x=81,xend=81,y=0,yend=80)) +
theme(legend.position = "bottom") + facet_wrap(~exito) + coord_flip() +
  labs(title = "Errores en el testeo", x = "Coordenada X", y = "Coordenada Y")
```

## Interpretabilidad del RandomForest

El Aprendizaje Estadístico Interpretable busca enmarcar los resultados de las predicciones en un contexto de interpretación y comprensión de los mecanismos de dichos valores predichos en función de los predictores. Concretamente, en el presente estudio, se busca estudiar las características y cuales son las variables que puedan estar afectando en algún sentido los valores que nos devuelve el RF analizado. En una primera instancia se busca analizar las relaciones entre las variables predictoras más significativas calculadas en los puntos anteriores a través del Partial Dependence Plot que nos da las predicciones promedio para el rango de valores que toma la variable predictora en la muestra. De esta manera, respecto a la verticalidad y horizontalidad total de las jugadas vemos claramente como a menor verticalidad de la jugada (en valor absoluto), mayor probabilidad de éxito en promedio mientras que a mayor horizontalidad (en valor absoluto) mayor probabilidad de éxito. Si bien en este último caso se cuenta con menor cantidad de observaciones en los extremos de la variable predictora analizada, esto es coherente con el resultado anteriormente mencionado en el sentido que en las jugadas *menos verticales*, se tiende a arriesgar menos en el sentido de perder la posesión de la pelota. Generalmente, los pases y las conducciones de pelota hacia adelante implican un mayor riesgo de perder la posesión ya que suelen encontrarse mayor cantidad de defensores del equipo rival.

```{r}
train$exito_num <- as.numeric(train$exito) - 1

explainer_rf <- explain_tidymodels(
  model = random_forest,
  data = train %>% select(-exito, -exito_num), 
  y = train$exito_num,
  label = "Random Forest",
  verbose = FALSE
)
vip_rf <- readRDS("./models/vip_rf.rds")
```

```{r}
set.seed(1805)
pdp_neventos <- model_profile(explainer_rf, N = nrow(df), variables = "n_eventos")

plot(pdp_neventos) + geom_rug()
```

```{r}
df %>% filter(dataset=='train') %>% ggplot()+
  geom_point(aes(vert_tot,horiz_tot,color=mundial))+
  geom_vline(xintercept = 0,linetype='dashed')+geom_hline(yintercept = 0,linetype='dashed')+facet_wrap(~exito)+
  scale_color_brewer(palette='Set1')
df %>% 
  group_by(team.name,mundial) %>% 
  summarise(v=median(vert_tot),h=median(horiz_tot),.groups = "drop") %>%
  ggplot()+geom_point(aes(v,h,color=mundial))+
  geom_vline(xintercept = 19.4,linetype='dashed')+
  geom_hline(yintercept = 0.325,linetype='dashed')+
  geom_text(aes(v,h,label=ifelse(abs(h)>3|abs(v)>25,as.character(team.name),""),color=mundial),hjust=0,vjust=0)+
  scale_color_brewer(palette='Set1')+
  labs(x='Verticalidad promedio',y='Horizontalidad promedio')+#facet_wrap(~exito)+
  theme_bw()

set.seed(1805)
pdp_dist <- model_profile(explainer_rf, N = nrow(df), variables = "dist.promP")

pdp_horiz <- model_profile(explainer_rf, N = nrow(df), variables = "horiz_tot")

plot(pdp_dist) + geom_rug()
plot(pdp_horiz) + geom_rug()
```

```{r}
set.seed(1805)
pdp_dist <- model_profile(explainer_rf, N = nrow(df), variables = "dist.promP")

plot(pdp_dist) + geom_rug()
```

```{r}
temp = predict(random_forest, new_data = test, type = "class") %>%
  bind_cols(predict(random_forest, new_data = test, type = "prob")) %>%
  bind_cols(test)

temp = temp  %>% mutate(exito = as.numeric(exito) - 1)
```

### % error por equipo

```{r}
temp  %>% group_by(team.name , mundial) %>% summarise(cant = n() , error=mean(exito!=.pred_class)) %>% arrange(desc(error)) %>% 
  left_join(ranking,by=c("team.name","mundial"))  %>% kable()
```

### Modelos por mundial

```{r}
random_forest_m = readRDS("./models/recipe1_random_forest_model.rds")
random_forest_tune_results_m = readRDS("./models/recipe1_random_forest_tune_results.rds")
random_forest_f = readRDS("./models/recipe2_random_forest_model.rds")
random_forest_tune_results_f = readRDS("./models/recipe2_random_forest_tune_results.rds")
```

### Visualización de la evolución de las métricas según los parámetros

```{r}
m = autoplot(random_forest_tune_results_m) +
  labs(
    title = "Evolución de las Métricas - Random Forest",
    x = "Hiperparámetros",
    y = "Métrica (ROC AUC, Accuracy, etc.)"
  ) + theme_minimal() + theme(legend.position = "none")

f = autoplot(random_forest_tune_results_f) +
  labs(
    title = "Evolución de las Métricas - Random Forest",
    x = "Hiperparámetros",
    y = "Métrica (ROC AUC, Accuracy, etc.)"
  ) + theme_minimal() + theme(legend.position = "none")

m/f
```

```{r}

```

### Matriz de Confusion

```{r}
rf_predictions_train <- predict(random_forest, train) %>%
  bind_cols(train)

rf_conf_matrix_train <- conf_mat(
  data = rf_predictions_train,
  truth = exito,
  estimate = .pred_class
)

autoplot(rf_conf_matrix_train, type = "heatmap") +
  labs(
    title = "Matriz de Confusión - Random Forest (Entrenamiento)",
    x = "Clase Predicha",
    y = "Clase Real"
  ) +
  theme_minimal()
```

### Importancia de las variables

```{r}
random_forest %>%
  extract_fit_engine() %>%
  vip::vip(geom = "col", aesthetics = list(fill = "steelblue")) +
  labs(
    title = "Importancia de las Variables - Random Forest",
    x = "Importancia Relativa",
    y = "Variable"
  ) +
  theme_minimal()
```
